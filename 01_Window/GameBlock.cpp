#include <GameBlock.hpp>
#include <cassert>
#include <raylib.h>
#include <iostream>


using namespace std;

const int blk_type[GameBlock::TYPE_MAX][4][16] = {
    /*************************TYPE_A************************/
    {
        /***************DIR_LEFT***************/
        {
            0, 0, 0, 0,
            0, 1, 1, 0,
            0, 1, 1, 0,
            0, 0, 0, 0,
        },
        /***************DIR_DOWN***************/
        {
            0, 0, 0, 0,
            0, 1, 1, 0,
            0, 1, 1, 0,
            0, 0, 0, 0,
        },
        /***************DIR_RIGHT***************/
        {
            0, 0, 0, 0,
            0, 1, 1, 0,
            0, 1, 1, 0,
            0, 0, 0, 0,
        },
        /***************DIR_UP***************/
        {
            0, 0, 0, 0,
            0, 1, 1, 0,
            0, 1, 1, 0,
            0, 0, 0, 0,
        },
    },

    /*************************TYPE_B************************/
    {
        /***************DIR_LEFT***************/
        {
            0, 2, 0, 0,
            0, 2, 0, 0,
            0, 2, 0, 0,
            0, 2, 0, 0,
        },
        /***************DIR_DOWN***************/
        {
            0, 0, 0, 0,
            2, 2, 2, 2,
            0, 0, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_RIGHT***************/
        {
            0, 2, 0, 0,
            0, 2, 0, 0,
            0, 2, 0, 0,
            0, 2, 0, 0,
        },
        /***************DIR_UP***************/
        {
            0, 0, 0, 0,
            2, 2, 2, 2,
            0, 0, 0, 0,
            0, 0, 0, 0,
        },
    },

    /*************************TYPE_C************************/
    {
        /***************DIR_LEFT***************/
        {
            3, 3, 0, 0,
            0, 3, 3, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_DOWN***************/
        {
            0, 3, 0, 0,
            3, 3, 0, 0,
            3, 0, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_RIGHT***************/
        {
            3, 3, 0, 0,
            0, 3, 3, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_UP***************/
        {
            0, 3, 0, 0,
            3, 3, 0, 0,
            3, 0, 0, 0,
            0, 0, 0, 0,
        },
    },

    /*************************TYPE_D************************/
    {
        /***************DIR_LEFT***************/
        {
            4, 0, 0, 0,
            4, 4, 0, 0,
            0, 4, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_DOWN***************/
        {
            0, 4, 4, 0,
            4, 4, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_RIGHT***************/
        {
            4, 0, 0, 0,
            4, 4, 0, 0,
            0, 4, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_UP***************/
        {
            0, 4, 4, 0,
            4, 4, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
        },
    },

    /*************************TYPE_E************************/
    {
        /***************DIR_LEFT***************/
        {
            0, 5, 0, 0,
            5, 5, 5, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_DOWN***************/
        {
            0, 5, 0, 0,
            5, 5, 0, 0,
            0, 5, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_RIGHT***************/
        {
            0, 0, 0, 0,
            5, 5, 5, 0,
            0, 5, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_UP***************/
        {
            0, 5, 0, 0,
            0, 5, 5, 0,
            0, 5, 0, 0,
            0, 0, 0, 0,
        },
    },

    /*************************TYPE_F************************/
    {
        /***************DIR_LEFT***************/
        {
            6, 6, 0, 0,
            0, 6, 0, 0,
            0, 6, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_DOWN***************/
        {
            0, 0, 0, 0,
            6, 6, 6, 0,
            6, 0, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_RIGHT***************/
        {
            0, 6, 0, 0,
            0, 6, 0, 0,
            0, 6, 6, 0,
            0, 0, 0, 0,
        },
        /***************DIR_UP***************/
        {
            0, 0, 6, 0,
            6, 6, 6, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
        },
    },

    /*************************TYPE_G************************/
    {
        /***************DIR_LEFT***************/
        {
            0, 7, 7, 0,
            0, 7, 0, 0,
            0, 7, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_DOWN***************/
        {
            7, 0, 0, 0,
            7, 7, 7, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_RIGHT***************/
        {
            0, 7, 0, 0,
            0, 7, 0, 0,
            7, 7, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_UP***************/
        {
            0, 0, 0, 0,
            7, 7, 7, 0,
            0, 0, 7, 0,
            0, 0, 0, 0,
        },
    },

    /*************************TYPE_H************************/
    {
        /***************DIR_LEFT***************/
        {
            0, 8, 0, 0,
            8, 8, 8, 0,
            0, 8, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_DOWN***************/
        {
            0, 8, 0, 0,
            8, 8, 8, 0,
            0, 8, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_RIGHT***************/
        {
            0, 8, 0, 0,
            8, 8, 8, 0,
            0, 8, 0, 0,
            0, 0, 0, 0,
        },
        /***************DIR_UP***************/
        {
            0, 8, 0, 0,
            8, 8, 8, 0,
            0, 8, 0, 0,
            0, 0, 0, 0,
        },
    },
};

const Color blk_color[GameBlock::TYPE_MAX+1] = {
    BLACK, YELLOW, GREEN, BLUE, BROWN, WHITE, GRAY, RED, PINK,
};

Color color(int v) {
    //cout << "color: " << v << endl;
    return blk_color[v];
}

GameBlock::GameBlock(size_t size)
{
    m_x = 0;
    m_y = 0;
    m_size = size;
}

void GameBlock::init(int type, int dir)
{
    assert(dir < GameBlock::DIR_MAX && dir >= 0);
    assert(type < GameBlock::TYPE_MAX && type >= 0);

    m_dir  = dir;
    m_type = type;
}

int GameBlock::d(int x, int y) const
{
    const int* d = blk_type[m_type][m_dir];
    return d[x*4+y];
}

void GameBlock::move(int x, int y)
{
    m_x += x;
    m_y += y;
}

void GameBlock::draw()
{
    Rectangle rect;
    const int* d = blk_type[m_type][m_dir];

    rect.height = rect.width = m_size;
    for(unsigned i = 0 ; i < 4 ; i ++){
        rect.x = (m_x + i) * m_size;
        for(unsigned j = 0 ; j < 4 ; j ++){
            if(d[i*4+j]){
                rect.y = (m_y + j) * m_size;
                DrawRectangleRounded(rect, 0.3, 1, color(d[i*4+j]));
            }
        }
    }
}

void GameBlock::nextType()
{
    if((++m_type) == GameBlock::TYPE_MAX){
        m_type = 0;
    }
}

void GameBlock::nextDir()
{
    if((++m_dir) == GameBlock::DIR_MAX){
        m_dir = 0;
    }
}

void GameBlock::setPos(int x, int y)
{
    m_x = x;
    m_y = y;
}
